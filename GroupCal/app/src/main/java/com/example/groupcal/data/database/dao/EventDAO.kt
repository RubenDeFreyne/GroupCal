package com.example.groupcal.data.database.dao

import androidx.lifecycle.LiveData
import androidx.room.*
import com.example.groupcal.data.database.databaseModels.Event
import com.example.groupcal.data.database.databaseModels.Group
import io.reactivex.Single

/**
 * DAO used to manage the CRUD operations of [Event] and implements [BaseDAO] to manage
 * commonly used operations
 */
@Dao
interface EventDAO : BaseDAO<Event> {

    /**
     * Get specific [Event] object saved in the database by its Id
     *
     * @param id The id generated by the database
     * @return Observable [Event] object from the database
     */
    @Query("SELECT * from event_table WHERE id =:id")
    fun get(id: Long): Single<Event?>

    /**
     * Get all [Event] objects in the database
     *
     * @return LiveData list of all [Event] objects in the database
     */
    @Query("SELECT * FROM event_table ORDER BY title ASC")
    fun getAllEvents(): LiveData<List<Event>>

    /**
     * Get all [Event] objects saved in the database from specific group
     *
     * @param id The id from the group
     * @return Live Data [Event] object from the database
     */
    @Query("SELECT * FROM event_table WHERE group_id =:id ORDER BY title DESC")
    fun getEventsByGroup(id: String): LiveData<List<Event>>

    /**
     * Get the number of rows of [Group] in database for checking if the database is empty
     *
     * @return The amount of rows in the [Group] table
     */
    @Query("select count(*) from event_table")
    fun getRowCount(): Int

}